// vim:filetype=javascript:

/**
 * == exports ==
 *
 * Exports from the `mongodb` module.
 **/

/** section: exports
 *  class MongoDB
 *
 *  A MongoDB client connection.
 *
 *  Before getting started with MongoDB it is worth reading the
 *  MongoDB page on [schema design] to get a better idea about
 *  how to structure and store yourt data better: typically you will normalize
 *  your data less when using a document database when you would with a
 *  relational database.
 *
 *  [schema design]: http://www.mongodb.org/display/DOCS/Schema+Design
 **/

/**
 * new MongoDB(server)
 * - server (String): server to connect to, of the form "host:port"
 *
 * Connect to the given mongoDB sever
 **/

/**
 *  MongoDB#find(ns, query[, limit[, skip[, fields]]]) -> MongoDB.Cursor
 *  - ns (String): namespace to query in the form of "db.collection.collection"
 *  - query (Object): query criteria
 *  - limit (Number): Only return `limit` documents (0 = unlimited)
 *  - skip (Number): Skip the first `skip` documents (0 = skip nothing)
 *  - fields (Object): select only certain fields
 *
 *  Perform a query against `ns` returning a cursor of results.
 *
 *  MongoDB supports fairly complex queries. A few examples are included below,
 *  but this is far from a complete selection:
 *
 *      { a : { $gt : 3 } } // a &gt; 3
 *      { shipping : { carrier: "usps" } } // matches if the shipping object contains only carrier
 *      { "shipping.carrier" : "usps" } // matches when shipping.carrier == "usps"
 *      { "field" : { $gt: value1, $lt: value2 } } // value1 &lt; field &lt; value2
 *      { x : { $ne : 3 } } // x != 3
 *      { j : {$in: [2,4,6]} } // j is a value in the given array
 *      { name : /acme.*corp/i } //
 *
 *  The full list 'binary' of operators understood is:
 *
 *  - `$gt`: greater than
 *  - `$lt`: less than
 *  - `$gte`: greater than or equal
 *  - `$lte`: less than or equal
 *  - `$ne`: not equal
 *  - `$in`: field is in array
 *  - `$nin`: field is not in array
 *  - `$mod`: modulo divison
 *  - `$all`: field must be an array containing all values in provided array
 *  - `$size`: match the size of an array
 *
 *  For regular expressions of the form `^normalchars.*` , the database
 *  will use an index when available and appropriate.
 *
 *  See the [MongoDB documentation][queries] for more details of how to
 *  do specify queries and for more [advanced features][adv_queries].
 *
 *  ##### Values in an Array #
 *
 *  To look for a value in an array, simply do:
 *
 *      .find(ns, { field: "our value" })
 *
 *  would match the document
 *
 *      { field: [ "other value", "our value"] }
 *
 *  ##### Values in an Embedded Object #
 *
 *  Nested object literals in queries are _always_ treated as exact matches.
 *  This means that
 *
 *      .find(ns, { author: { name: "Joe Blogger" } })
 *
 *  will only match if the author object contains just the name field.
 *  (Replacing the 'name' with a regexp in the above query would only match
 *  when there is a regexp stored.) To match against partial sub-objects, or to
 *  match using a regexp, use dot-notation:
 *
 *      .find(ns, { "author.name": "Joe Blogger" })
 *
 *  ##### Complex expressions #
 *
 *  If you wish to filter on more complex expressions than can be achieved with
 *  the query object, you can evaluate conditions on the server using
 *  javascript. You do this by passing a string or a function in the `$where`
 *  field of the query
 *
 *      .find(ns, { $where: "this.a > 3" })
 *      .find(ns, { $where: function(x) { return x.a > 3 }});
 *
 *  In the code, `this` is bound to the document in question.
 *
 *  It is worth noting that this is considerably slower for large collections
 *  than the more direct query syntax, so only use if it you have to.
 *
 *  See [here][sscode] for more information on using `$where` and otherwise
 *  running code on the server.
 *
 *  [queries]: http://www.mongodb.org/display/DOCS/Queries+and+Cursors "Queries and Cursors"
 *  [adv_queries]: http://www.mongodb.org/display/DOCS/Advanced+Queries
 *  [sscode]: http://www.mongodb.org/display/DOCS/Server-side+Code+Execution
 **/

/**
 *  MongoDB#findOne(ns, query[, fields]) -> Object
 *  - ns (String): "db.collection"
 *  - query (Object): query criteria
 *  - fields (Object): select only certain fields
 *
 *  Perform a query against `ns` and return the first object matched. See
 *  [[MongoDB#find]] for syntax of `query`.
 **/

/**
 *  MongoDB#insert(ns, object) -> undefined
 *  - ns (String): "db.collection"
 *  - object (Object): what to insert into the collection
 *
 *  Store `object` in the collection `ns`.
 *
 *  Each document stored in a MongoDB collection must have a unique object id,
 *  stored in its `_id` property.  If the object does not already have an `_id`
 *  property the database will create a new [[MongoDB.OID]] id for the object
 *  upon insert.
 *
 *  Object ids can be of any type so long as they are unique across the entire
 *  collection. For instance a `users` collection could store usernames in the
 *  `_id` property quite happily (assuming of course the usernames are unique.)
 **/

/**
 *  MongoDB#update(ns, criteria, objNew[, upsert[, multi]]) -> undefined
 *  - ns (String): "db.collection"
 *  - criteria (Object): query which selects the record(s) to update
 *  - objNew (Object): updated object or $ operators (e.g., $inc) which
 *    manipulate the object
 *  - upsert (Boolean): if this should be an "upsert"; that is, if the record
 *    does not exist, insert it
 *  - multi (Boolean): if all documents matching criteria should be updated
 *    (the default is to only update the first document found)
 *
 *  Upsert means "update if present; insert is missing". The upsert feature is
 *  useful when using "modifier operations" (see below).
 *
 *  ##### Modifier Operations #
 *
 *  Modifier operations are performance enhancement techniques useful when
 *  updating an existing object in certain ways, such as incrementing a number.
 *
 *
 *  - `{ $inc: { field: value } }`
 *  : increments `field` by the number value if `field` is present in the object,
 *    otherwise sets `field` to the number `value`.
 *  - `{ $set: { field: value } }`
 *  : sets `field` to `value`. All datatypes are supported with $set.
 *  - `{ $push: { field: value } }`
 *  : appends `value` to `field`, if `field` is an existing array, otherwise
 *    sets `field` to the array `[value]` if field is not present. If field is
 *    present but is not an array, an error condition is raised.
 *  - `{ $pushAll: { field: array } }`
 *  : similarly to `$push`, but push multiple values at once.
 *  - `{ $pop: { field: 1 } }`
 *  : removes the last element in the array `field`.
 *  - `{ $pop: { field: -1 } }`
 *  : removes the first element in the array `field`.
 *  - `{ $pull: { field: value } }`
 *  : removes all occurrences of `value` from `field` if it is an array. If
 *    `field` is present but is not an array, an error condition is raised.
 *  - `{ $pullAll: { field: array } }`
 *  : similarl to `$pull`, but remove all occurrences of each value in `array`.
 *
 *  You may use upsert with a modifier operation. In such a case, the modifiers
 *  will be applied to the update criteria member and the resulting object will
 *  be inserted.
 *
 *  ##### Checking the Outcome of an Update Request #
 *
 *  As described above, a non-upsert update may or may not modify an existing
 *  object. An upsert will either modify an existing object or insert a new
 *  object. The client may determine if its most recent message on a connection
 *  updated an existing object, by subsequently issuing a `getlasterror`
 *  command:
 *
 *      .findOne(ns, {getlasterror:1} )
 *
 *  If the result of the `getlasterror` command contains an `updatedExisting`
 *  field, the last message on the connection was an update request. If the
 *  `updatedExisting` field's value is true, that update request caused an
 *  existing object to be updated; if `updatedExisting` is false, no existing
 *  object was updated.
 **/

/**
 *  MongoDB#remove(ns[, query[, justOne=false]]) -> undefined
 *  - ns (String): "db.collection"
 *  - query (Object): query criteria
 *  - justOne (Boolean): delete only the first matching document
 *
 *  Delete documents matching the provided query (or all documents if no query
 *  is provided.) if `justOne` is true, then only the first matching document
 *  will be deleted, otherwise all documents that match the query criteria will
 *  be deleted.
 *
 *  If you have retrieved a document and you wish to delete it, best way is to
 *  specify its `_id` property:
 *
 *      .delete(ns, {_id, myObj._id});
 **/

/**
 *  MongoDB#getCollectionNames(db) -> Array
 *  - db (String): databnase name
 *
 *  Get a list of all collections in the specified database.
 **/

/**
 *  MongoDB#getDatabaseNames() -> Array
 *
 *  Get a list of all current databases
 **/

/**
 *  MongoDB#exists(ns) -> Boolean
 *  - ns (String): namespace
 *
 *  Queries if the specified namespace eixsts.
 **/

/**
 *  MongoDB#runCommand(db, command) -> Object
 *  - db (String): database name. Use "admin" for global administrative
 *    commands
 *  - command (Object): command object to execute.
 *
 *  Run a command against the server. See the [MongoDB docs][mongo_command] for
 *  a full list of database commands and return formats
 *
 *  [mongo_command]: http://www.mongodb.org/display/DOCS/List+of+Database+Commands
 **/

/** section: exports
 *  class MongoDB.Cursor
 *
 *  This class is not directly constructible form javascript - use
 *  [[MongoDB#find]] to create cursors.
 **/

/**
 *  MongoDB.Cursor#id -> Number
 *
 *  The id of this cursor.  Of little use outside of the library.
 **/

/**
 *  MongoDB.Cursor#next() -> Object | null
 *
 *  Return the next document form the cursor, or `null` if none are left.
 **/

/**
 *  MongoDB.Cursor#more() -> Boolean
 *
 *  Return true if there are more documents available to this cursor.
 **/

/**
 *  MongoDB.Cursor#explain() -> Object
 *
 *  Get information about what indexs and scanning behaviours this cursor uses.
 *
 *  See [here][explain] for more information.
 *
 *  [explain]: http://www.mongodb.org/display/DOCS/Optimization#Optimization-Explain
 **/

/**
 *  MongoDB.Cursor#hint(keyPattern) -> MongoDB.Cursor
 *  - keyPattern (Object): index hint to supply.
 *
 *  Specify index hint to MongoDB.
 *
 *  The MongoDB query optimizer usually does a good job, but sometimes explicit
 *  "hints" can be useful, particularly when using `$where` queries or inline
 *  functions.
 *
 *  See [here][hint] for more information.
 *
 *  [hint]: http://www.mongodb.org/display/DOCS/Optimization#Optimization-Hint
 **/

/**
 *  MongoDB.Cursor#min(cond) -> MongoDB.Cursor
 *  - cond (Object): lower bound condition
 *
 *  Constrain the results to with in a provided range in conjunction with an
 *  index. `MongoDB.Cursor#min` and [[MongoDB.Cursor#max]] may be used together
 *  or singularly. If both are provided then logic is akin to this: `min <= x <
 *  max`.
 *
 *  The index to be used may be specified with a hint() or one may be inferred
 *  from pattern of the keys passed to min() and/or max().
 *
 *  See [here][min_max] for more information.
 *
 *  ##### Examples #
 *
 *      m.find(ns).min({name:"barry"}}.max({name:"larry"}).hint({name:1});
 *      m.find(ns).min({name:"barry"}}.max({name:"larry"});
 *      m.find(ns).min({last_name:"smith",first_name:"john"}};
 *
 *  [min_max]: http://www.mongodb.org/display/DOCS/min+and+max+Query+Specifiers
 **/

/**
 *  MongoDB.Cursor#max(cond) -> MongoDB.Cursor
 *  - cond (Object): upper bound condition
 *
 *  See [[MongoDB.Cursor#min]] for details.
 **/

/**
 *  MongoDB.Cursor#snapshot() -> MongoDB.Cursor
 *
 *  Use snapshot mode for the query to guarantee no duplicates are returned.
 *
 *  Snapshot mode assures no duplicates are returned, or objects missed, which
 *  were present at both the start and end of the query's execution (if an
 *  object is new during the query, or deleted during the query, it may or may
 *  not be returned, even with snapshot mode).
 *
 *  Note that short query responses (less than 1MB) are always effectively
 *  snapshotted.
 *
 *  Currently, snapshot mode may not be used with sorting or explicit hints.
 **/

/**
 *  MongoDB.Cursor#sort(field[, asc=1]) -> MongoDB.Cursor
 *  MongoDB.Cursor#sort(sortPattern) -> MongoDB.Cursor
 *  - field (String): field to sort on
 *  - asc (Number): sort order. 1 for ascending, -1 for descending
 *  - sortPattern (Object): multiple fields to sort by.
 *
 *  Change the sort order for a Cursor. `sortPattern` is an object whose keys
 *  are the key names to sort on (like `field`) and with values of `1` or `-1`.
 *
 *  You may use `sort()` to return data in order without an index if the data
 *  set to be returned is small (less than four megabytes). For these cases it
 *  is best to use `limit` argument to [[MongoDB#find]] and `sort()` together.
 *
 *  ##### Examples #
 *
 *      .sort({name: 1, age: -1}) // 'name' ascending, then 'age' descending
 *      .sort({"father.name": 1}) // sort by father.name property
 *
 *  ##### Natural Ordering #
 *
 *  When executing a `find()` with no parameters, the database returns objects in
 *  forward natural order. For standard tables, natural order is not
 *  particularly useful because, although the order is often close to insertion
 *  order, it is not guaranteed to be. However, for Capped Collections, natural
 *  order is guaranteed to be the insertion order. This can be very useful for
 *  sorting.
 *
 *  ##### Examples #
 *
 *      .sort({$natural: -1}).limit(50) // 50 most recently inserted docs
 *      .sort("$natural", -1).limit(50) // The same
 *
 *  [sorting]: http://www.mongodb.org/display/DOCS/Sorting
 **/

/**
 *  MongoDB.Cursor#where(code, scope) -> MongoDB.Cursor
 *  - code (String | Function): function to evaluate
 *  - scope (Object): scope.
 *
 *  Queries to the Mongo database support a `$where` parameter option which
 *  contains a javascript function that is evaluated to see whether objects
 *  being queried match its criteria.
 *
 *  Use this helper to append such a function to a query object, or if you need
 *  to run a function with particular objects in scope.
 *
 *  See [[MongoDB#find]] for more information.
 **/


/** section: exports
 *  class MongoDB.OID
 *
 *  A wrapper around a mongodb ObjectId.
 *
 *  Most objects that get stored in MongoDB will have an OID allocated to them
 *  and stored in the `_id` field if there is no ID present.
 **/

/**
 * new MongoDB.OID([oid])
 * - oid (String): 24 char hex string OID to use
 *
 * Construct a new MongoDB OID. If `oid` is passed, that will be used,
 * otherwise a new OID will be generated.
 **/

/**
 * MongoDB.OID#toString() -> String
 **/

/**
 * MongoDB.OID#toSource() -> String
 **/

/**
 * MongoDB.OID#valueOf() -> String
 *
 * Get the OID in form of a 24 charcter hex string.
 **/
